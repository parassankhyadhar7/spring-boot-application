terraform{
  required_providers{
    azurerm = {
      source = hashicorp/azurerm
      version = ">=x.y.z"
    }
    backed "azurerm" {
       resource_group_name = 
       storage_account_name =
       container_name = 
       key = 
       access_key =
    }
  }

}



Dockerfile


FROM mvn:openjdk:17 AS builder
WORKDIR /app
USER root
COPY . .
RUN mvn clean package

FROM tomcat:latest
WORKDIR /usr/local/webapps
USER root
COPY --from=builder /app/target/demo.war .
EXPOSE 8080
RUN ["catalina.sh" "run"] 


FROM ubuntu
ENTRYPOINT ["sleep"]
CMD ["10" ]

docker build -t demoimage .

docker run -d  -p 8080:80 --name democon demoimage 10

sleep 10 


config_map.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-config-map
data:
  COLOR: "green"
  APP_NAME: "demoapp"



Pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: demo-pod
  labels:
    app: login
spec:
  initContainers:
    -  name: 
  containers:
    -  name: demo-con
       image: login:latest
       command: ["sleep"]
       args: ["sleep 5"]
       env:                                    envfrom:
         - name: COLOR                           configMapRef:
           valueFrom:                              name: demo-config-map
             configMapKeyRef:
               name: demo-config-map
               key: COLOR
       volumeMounts:
         -  mountPath: /opt
            name: data-volume
  volumes:
    - name: data-volume
      hostPath:
        path: /data
        type: Directory

deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-deployment
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 5
      maxUnavailable: 1
  selector:
    matchlabels:
      app: login
  template:
    metadata:
      name: loginapp
      labels:
        app: login
    spec:
      containers:
        - name: loginapp
          image: login:latest
          env:
            - name: COLOR
              valuefrom:
                configMapKeyRef:
                  name: demo-config
                  key: COLOR
          volumeMountes:
            mountPath: /opt
            name: data-volume
      volumes:
        -  name: data-volume
           persistantVolumeClaim:
             claimNme: pvc-data

cluserservice.yaml

apiVersion: v1
kind: Service
metadata:
  name: cluster-service
spec:
  type: ClusterIP
  ports:
    - port: 8080
  selector:
    app: login
    


loadbalanerservice.yaml

apiVersion: v1
kind: Service
metadata:
  name: cluster-service
spec:
  type: LoadBalancer
  ports:
    - port: 30001
      targetPort: 8080
  selector:
   app: login


ingress.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-ingress
  annotations: 
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    -  http:
         paths:
           - path: /main(/|$)(.*)
             type: Prefix
             backend:
               service:
                 name: demo-service-01
                 port:
                   number: 8080   
            - path: /shop(/|$)(.*)
              type: Prefix
              backend:
                service:
                  name: demo-service-02
                  port:
                    number: 8080   

ingress_policy.yaml

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-policy
spec:
  policyTypes:
    - ingress
  podSelector:
    matchLables:
      app: db
  ingress:
    - from:
        - podSelector:
            matchLables:
              app: login
      ports:
        - protocol: TCP
          port: 3306



persistentvolume.yaml

apiVersion: v1
kind: PersistentVaolume
metadata:
  name: pv-01
spec:
  accessModes:
    -  ReadWriteOnce
  capacity:
    storage: 10 Gi
  hostPath:
    path: /temp/data or awsElasticClockStrore:
                          volumeID: <voulme-id>

persistantvalueclaim.yaml

apiVersion: v1
kind: PersistentValumeClaim
metadata:
  name: my claim
spec:
  accessModes:
    -  ReadWriteOnce
  resource:
    request:
      storage: 500Mi



hpa.yaml

apiversion: autoscalling/v2beta1
kind: HorizontalPodScalar
metadata:
  name: demo-hpa
  namespace: demo
spec:
  scaleTatgetRef:
    apiversion: apps/v1
    kind: Deployment
    name: demo-deploy
  maxReplicas: 5
  minReplica: 1
  matrics:
    -  type: Resource
       resource:
         name: cpu                                 name: memory
         targetAverageUtilization: 80              targetAverageUtilization: 50











